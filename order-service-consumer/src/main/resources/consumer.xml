<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd
		http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

	<context:component-scan base-package="com.hyman.dubbo.service.impl"></context:component-scan>

	<dubbo:application name="order-service-consumer"></dubbo:application>
	
	<dubbo:registry address="zookeeper://127.0.0.1:2181"></dubbo:registry>
	
	<!--  配置本地存根，在 dubbo:reference 标签中添加 stub 配置即可 -->
	
	<!--
		声明需要调用的远程服务的接口；生成远程服务代理。interface 指向服务提供者暴露的接口（名字必须相同）。
		引用缺省是延迟初始化的，只有引用被注入到其它 Bean，或被 getBean() 获取，才会初始化。如果需要饥饿加载，即没有人引用也立
		即生成动态代理，可以配置：<dubbo:reference ... init="true" />
	-->
	<!--
		不同粒度配置的覆盖关系（即配置的查找顺序），以 timeout 为例（其它 retries, loadbalance, actives 等类似）：
		1、精确优先 (方法级优先，接口级次之，全局配置再次之)。
		2、消费者设置优先(如果级别一样，则消费方优先，提供方次之)。
		3、reference:method > service:method，reference > service，consumer > provider。

		timeout="0"	默认是 1000ms
		retries=""	重试次数，不包含第一次调用，0代表不重试。并且如果有多个提供方，则会在重试次数内在这些提供方之间进行切换调用。
		失败自动切换，当出现失败，重试其它服务器，但重试会带来更长延迟。
		幂等方法可以设置重试次数（查询、删除、修改）、非幂等方法不能设置重试次数（新增）。

		另外可以设置 check="false"，即关闭某个服务的启动时检查 (没有提供者时报错)。
	-->
	<dubbo:reference interface="com.hyman.dubbo.service.UserService" id="userService" timeout="5000" retries="3"
					 version="*" stub="com.hyman.dubbo.service.impl.UserServiceStub">
		<!-- <dubbo:method name="getUserAddressList" timeout="1000"></dubbo:method> -->
	</dubbo:reference>

	<!-- 配置当前消费者的统一规则：关闭所有服务的启动时检查 (没有提供者时报错) -->
	<!--<dubbo:consumer check="false" timeout="5000"></dubbo:consumer>-->

	<!-- 关闭注册中心启动时检查 (注册订阅失败时报错) -->
	<!--<dubbo:registry check="false" />-->

	<!--
	多版本：
	当一个接口的实现，出现不兼容升级时，可以用版本号过渡，版本号不同的服务相互间不引用（消费方调用时，可以指定版本进行调用）。
	可以按照以下的步骤进行版本迁移：
	在低压力时间段，先升级一半提供者为新版本，再将所有消费者升级为新版本，然后将剩下的一半提供者升级为新版本。类似于灰度发布。

	老版本服务提供者配置：<dubbo:service interface="com.foo.BarService" version="1.0.0" />
	新版本服务提供者配置：<dubbo:service interface="com.foo.BarService" version="2.0.0" />
	老版本服务消费者配置：<dubbo:reference id="barService" interface="com.foo.BarService" version="1.0.0" />
	新版本服务消费者配置：<dubbo:reference id="barService" interface="com.foo.BarService" version="2.0.0" />
	如果不需要区分版本，可以配置：<dubbo:reference id="barService" interface="com.foo.BarService" version="*" />
	-->

	<!--
	监控中心配置。对应的配置类： org.apache.dubbo.config.MonitorConfig。
	第一种，代表指定监控中心协议，如果 protocol="registry"，表示从注册中心发现监控中心地址，否则直连监控中心。默认值 dubbo。
	第二种，代表直连监控中心服务器地址，address="10.20.130.230:12080"。没有默认值。

	Simple Monitor 挂掉不会影响到 Consumer 和 Provider 之间的调用，所以用于生产环境不会有风险。
	Simple Monitor 采用磁盘存储统计信息，请注意安装机器的磁盘限制，如果要集群，建议用mount共享磁盘。
	-->
	<dubbo:monitor protocol="registry"></dubbo:monitor>
	<!-- <dubbo:monitor address="127.0.0.1:7070"></dubbo:monitor> -->
	
</beans>
